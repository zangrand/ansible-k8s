---
- name: Reset kubeadm before init in case this is not the first run
  command: kubeadm reset -f
  when: kubeadm_reset_before_init
  register: reset_cluster
  
- name: kubeadm init with pre generated token
  when: reset_cluster is succeeded
  shell: |
    kubeadm init --pod-network-cidr {{ flannel_subnet }} --token {{ kubeadm_token }}
  register: init_cluster

- name: allow permissive RBAC rules
  when: init_cluster
  command: "kubectl --kubeconfig /etc/kubernetes/admin.conf create clusterrolebinding permissive-binding \
  --clusterrole=cluster-admin \
  --user=admin \
  --user=kubelet \
  --group=system:serviceaccounts"

- name: taint master node
  when: init_cluster
  command: kubectl --kubeconfig /etc/kubernetes/admin.conf taint nodes --all node-role.kubernetes.io/master-

- name: install flannel pod network
  when: init_cluster
  command: kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

- name: Create Kubernetes config directory
  become: false
  file: path="~/.kube/" state=directory

- name: Change permissions of .kube/config
  file: path=/etc/kubernetes/admin.conf mode=0775

- name: Copy admin.conf to Home directory
  when: init_cluster and ansible_user is defined
  become: false
  copy:
    src: "{{ kubeadmin_config }}"
    dest: "~/.kube/config"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
    remote_src: True

- name: Clone prometheus-operator repo
  become: no
  git:
    repo: https://github.com/coreos/prometheus-operator
    dest: ./prometheus-operator
    update: yes
    force: yes

- name: Set the NodePort to the Grafana service configuration
  get_url:
    url: https://raw.githubusercontent.com/zangrand/ansible-k8s/master/k8s/grafana-service.yaml
    dest: prometheus-operator/contrib/kube-prometheus/manifests/

- name: Set the NodePort to the Alertmanager service configuration
  get_url:
    url: https://raw.githubusercontent.com/zangrand/ansible-k8s/master/k8s/alertmanager-service.yaml
    dest: prometheus-operator/contrib/kube-prometheus/manifests/

- name: Set the NodePort to the Prometheus service configuration
  get_url:
    url: https://raw.githubusercontent.com/zangrand/ansible-k8s/master/k8s/prometheus-service.yaml
    dest: prometheus-operator/contrib/kube-prometheus/manifests/

- name: Clone spark-on-k8s-operator repo
  become: no
  git:
    repo: https://github.com/GoogleCloudPlatform/spark-on-k8s-operator.git
    dest: ./spark-on-k8s-operator
    update: yes
    force: yes

- name: Enable and restart kubelet engine
  systemd:
    name: kubelet
    daemon_reload: yes
    state: restarted
    enabled: yes
  register: started_kubelet

- name: Deploy the kubernetes dashboard
  when: init_cluster and started_kubelet and enable_dashboard
  command: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
        apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml
  register: create_result
  until: create_result.rc == 0
  retries: 5
  delay: 2

- name: Setup the kubernetes dashboard
  when: init_cluster and started_kubelet and enable_dashboard
  command: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
        apply -f https://raw.githubusercontent.com/zangrand/ansible-k8s/master/k8s/dashboard-setup.yaml
  register: create_result
  until: create_result.rc == 0
  retries: 5
  delay: 2

- name: Deploy Prometheus
  when: init_cluster and started_kubelet
  command: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
        apply -f prometheus-operator/contrib/kube-prometheus/manifests
  register: create_result
  until: create_result.rc == 0
  retries: 5
  delay: 2

- name: Deploy the Spark operator
  when: init_cluster and started_kubelet
  command: |
    kubectl --kubeconfig={{ kubeadmin_config }} apply -f {{ item }}
  with_items:
     - "spark-on-k8s-operator/manifest/spark-rbac.yaml"
     - "spark-on-k8s-operator/manifest/spark-operator-rbac.yaml"
     - "spark-on-k8s-operator/manifest/spark-operator-with-metrics.yaml"
  register: create_result
  until: create_result.rc == 0
  retries: 5
  delay: 2

 - name: Calculate the K8S CA CERT HASH
  when: init_cluster and started_kubelet
  command: |
    openssl x509 -in /etc/kubernetes/pki/ca.crt -noout -pubkey | openssl rsa -pubin -outform DER 2>/dev/null | sha256sum | cut -d ' ' -f1
  register: k8s_ca_cert_hash

- name: Create the secret for os-k8s-node
  when: init_cluster and started_kubelet
  become: yes
  command: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
        create secret generic os-k8s-node \
        --from-literal=OS_AUTH_URL={{ lookup('env', 'OS_AUTH_URL') }} \
        --from-literal=OS_PROJECT_ID={{ lookup('env', 'OS_PROJECT_ID') }} \
        --from-literal=OS_PROJECT_NAME={{ lookup('env', 'OS_PROJECT_NAME') }} \
        --from-literal=OS_USER_DOMAIN_NAME={{ lookup('env', 'OS_USER_DOMAIN_NAME') }} \
        --from-literal=OS_CACERT="/etc/kubernetes/pki/os_ca_cert.pem" \
        --from-literal=OS_USERNAME={{ lookup('env', 'OS_USERNAME') }} \
        --from-literal=OS_PASSWORD={{ lookup('env', 'OS_PASSWORD') }} \
        --from-literal=OS_INTERFACE={{ lookup('env', 'OS_INTERFACE') }} \
        --from-literal=OS_IDENTITY_API_VERSION={{ lookup('env', 'OS_IDENTITY_API_VERSION') }} \
        --from-literal=OS_VM_NAME={{ lookup('env', 'OS_VM_NAME') }} \
        --from-literal=OS_IMAGE={{ lookup('env', 'OS_IMAGE') }} \
        --from-literal=OS_FLAVOR={{ lookup('env', 'OS_FLAVOR') }} \
        --from-literal=OS_SECURITY_GROUP={{ lookup('env', 'OS_SECURITY_GROUP') }} \
        --from-literal=OS_KEY_NAME={{ lookup('env', 'OS_KEY_NAME') }} \
        --from-literal=K8S_MASTER_HOST={{ hostvars[{{ groups['master'] }}]['ansible_host'] }} \
        --from-literal=K8S_CA_CERT_HASH=k8s_ca_cert_hash.stdout \
        --from-file=os_ca_cert.pem={{ lookup('env', 'OS_CACERT') }} \
        -n kube-system
  register: create_result


